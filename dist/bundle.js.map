{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/background.ts","webpack:///./src/characters/turtle.ts","webpack:///./src/constants/angles.ts","webpack:///./src/controls/controls.ts","webpack:///./src/controls/keyboard.ts","webpack:///./src/controls/pointer.ts","webpack:///./src/controls/touchpad.ts","webpack:///./src/levels/level-selector.ts","webpack:///./src/levels/level.ts","webpack:///./src/levels/level1.ts","webpack:///./src/levels/level2.ts","webpack:///./src/turtle-observer.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import Turtle from \"./characters/turtle\";\r\nimport Level from \"./levels/level\";\r\n\r\ninterface Options {\r\n  canvas: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n  mainCharacter: Turtle;\r\n  level: Level;\r\n}\r\n\r\nfunction paintBackground(options: Options) {\r\n  const backgroundImage = document.createElement(\"img\");\r\n  backgroundImage.src = options.level.getBgImg();\r\n  const horizontalSegments = calculateScreenCutOffPoints(\r\n    backgroundImage.width,\r\n    options.canvas.width\r\n  );\r\n  const verticalSegments = calculateScreenCutOffPoints(\r\n    backgroundImage.height,\r\n    options.canvas.height\r\n  );\r\n  const x =\r\n    options.mainCharacter.getX() < options.canvas.width\r\n      ? 0\r\n      : horizontalSegments[\r\n          Math.floor(backgroundImage.width / options.mainCharacter.getX()) - 1\r\n        ];\r\n  const y =\r\n    options.mainCharacter.getY() < options.canvas.height\r\n      ? 0\r\n      : verticalSegments[\r\n          Math.floor(backgroundImage.height / options.mainCharacter.getY()) - 1\r\n        ];\r\n  backgroundImage.onload = () =>\r\n    options.context.drawImage(\r\n      backgroundImage,\r\n      x,\r\n      y,\r\n      options.canvas.width,\r\n      options.canvas.height,\r\n      0,\r\n      0,\r\n      options.canvas.width,\r\n      options.canvas.height\r\n    );\r\n  return backgroundImage;\r\n}\r\n\r\nfunction calculateScreenCutOffPoints(\r\n  bgSize: number,\r\n  canvasSize: number\r\n): Array<number> {\r\n  const points = [];\r\n  const noOfFits = Math.floor(bgSize / canvasSize);\r\n  for (let i = 1; i < noOfFits; i++) {\r\n    points.push(i * canvasSize);\r\n  }\r\n  points.push(bgSize - noOfFits * canvasSize);\r\n  return points;\r\n}\r\n\r\nexport default paintBackground;\r\n","import angles from \"../constants/angles\";\r\nimport Character from \"./character\";\r\n\r\nclass Turtle implements Character {\r\n  private x: number;\r\n  private y: number;\r\n  private angle: number;\r\n\r\n  private bgStartX: number;\r\n  private bgStartY: number;\r\n  private limitX: number;\r\n  private limitY: number;\r\n\r\n  constructor() {\r\n    this.resetPosition();\r\n    this.angle = angles.right;\r\n    this.setBgStart(0, 0);\r\n  }\r\n\r\n  getX = () => this.x;\r\n  getY = () => this.y;\r\n\r\n  resetPosition() {\r\n    this.x = 50;\r\n    this.y = 10;\r\n  }\r\n\r\n  setBgStart(x: number, y: number) {\r\n    this.bgStartX = x;\r\n    this.bgStartY = y;\r\n  }\r\n\r\n  setLimits(x: number, y: number) {\r\n    this.limitX = x;\r\n    this.limitY = y;\r\n  }\r\n\r\n  moveUp() {\r\n    this.rotate(angles.up);\r\n    if (this.y > 0) {\r\n      --this.y;\r\n    }\r\n  }\r\n\r\n  moveDown() {\r\n    this.rotate(angles.down);\r\n    if (this.y < this.limitY) {\r\n      ++this.y;\r\n    }\r\n  }\r\n\r\n  moveLeft() {\r\n    this.rotate(angles.left);\r\n    if (this.x > 0) {\r\n      --this.x;\r\n    }\r\n  }\r\n\r\n  moveRight() {\r\n    this.rotate(angles.right);\r\n    if (this.x < this.limitX) {\r\n      ++this.x;\r\n    }\r\n  }\r\n\r\n  private rotate(angle: number) {\r\n    this.angle = angle;\r\n  }\r\n\r\n  private applyRotation(context: CanvasRenderingContext2D) {\r\n    context.translate(this.x, this.y);\r\n    context.rotate(this.angle);\r\n    context.translate(-this.x, -this.y);\r\n  }\r\n\r\n  paint(context: CanvasRenderingContext2D) {\r\n    const turtleImage = document.createElement(\"img\");\r\n    turtleImage.src = \"./images/turtle.png\";\r\n    turtleImage.onload = () => {\r\n      this.applyRotation(context);\r\n      context.drawImage(\r\n        turtleImage,\r\n        this.x - this.bgStartX,\r\n        this.y - this.bgStartY,\r\n        turtleImage.width / 4,\r\n        turtleImage.height / 4\r\n      );\r\n      context.resetTransform();\r\n    };\r\n  }\r\n}\r\n\r\nexport default Turtle;\r\n","const angles = {\r\n  up: 0,\r\n  right: Math.PI / 2,\r\n  down: Math.PI,\r\n  left: Math.PI + Math.PI / 2,\r\n};\r\n\r\nexport default angles;\r\n","import Turtle from \"../characters/turtle\";\r\nimport bindKeyboard from \"./keyboard\";\r\nimport bindPointer from \"./pointer\";\r\nimport bindWheel from \"./touchpad\";\r\n\r\nfunction bindControls(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  bindKeyboard(canvas, mainCharacter);\r\n  bindWheel(canvas, mainCharacter);\r\n  bindPointer(canvas, mainCharacter);\r\n}\r\n\r\nexport default bindControls;\r\n","import Turtle from \"../characters/turtle\";\r\n\r\nfunction handleKeyDown(event: KeyboardEvent, mainCharacter: Turtle) {\r\n  const upKeys = [\"w\", \"W\", \"ArrowUp\"];\r\n  const downKeys = [\"s\", \"S\", \"ArrowDown\"];\r\n  const leftKeys = [\"a\", \"A\", \"ArrowLeft\"];\r\n  const rightKeys = [\"d\", \"D\", \"ArrowRight\"];\r\n\r\n  if (upKeys.includes(event.key)) {\r\n    mainCharacter.moveUp();\r\n  }\r\n\r\n  if (downKeys.includes(event.key)) {\r\n    mainCharacter.moveDown();\r\n  }\r\n\r\n  if (leftKeys.includes(event.key)) {\r\n    mainCharacter.moveLeft();\r\n  }\r\n\r\n  if (rightKeys.includes(event.key)) {\r\n    mainCharacter.moveRight();\r\n  }\r\n}\r\n\r\nfunction bindKeyboard(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  canvas.addEventListener(\"keydown\", (event) =>\r\n    handleKeyDown(event, mainCharacter)\r\n  );\r\n}\r\n\r\nexport default bindKeyboard;\r\n","import Turtle from \"../characters/turtle\";\r\n\r\nfunction handleEvent(event: TouchEvent | PointerEvent, mainCharacter: Turtle) {\r\n  event.preventDefault();\r\n  let x: number;\r\n  let y: number;\r\n  if (event instanceof TouchEvent) {\r\n    const touch = event.touches[0];\r\n    x = touch.pageX;\r\n    y = touch.pageY;\r\n  } else {\r\n    x = event.pageX;\r\n    y = event.pageY;\r\n  }\r\n  if (x < mainCharacter.getX()) {\r\n    mainCharacter.moveLeft();\r\n  }\r\n  if (x > mainCharacter.getX()) {\r\n    mainCharacter.moveRight();\r\n  }\r\n  if (y < mainCharacter.getY()) {\r\n    mainCharacter.moveUp();\r\n  }\r\n  if (y > mainCharacter.getY()) {\r\n    mainCharacter.moveDown();\r\n  }\r\n}\r\n\r\nfunction bindPointer(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  if (PointerEvent) {\r\n    canvas.addEventListener(\"pointerdown\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n    canvas.addEventListener(\"pointermove\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n  } else {\r\n    canvas.addEventListener(\"touchstart\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n    canvas.addEventListener(\"touchmove\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n  }\r\n}\r\n\r\nexport default bindPointer;\r\n","import Turtle from \"../characters/turtle\";\r\n\r\nfunction handleWheel(event: WheelEvent, mainCharacter: Turtle) {\r\n  event.preventDefault();\r\n  if (event.deltaX < 0) {\r\n    mainCharacter.moveLeft();\r\n  }\r\n  if (event.deltaX > 0) {\r\n    mainCharacter.moveRight();\r\n  }\r\n  if (event.deltaY < 0) {\r\n    mainCharacter.moveUp();\r\n  }\r\n  if (event.deltaY > 0) {\r\n    mainCharacter.moveDown();\r\n  }\r\n}\r\n\r\nfunction bindWheel(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  canvas.addEventListener(\"wheel\", (event) =>\r\n    handleWheel(event, mainCharacter)\r\n  );\r\n}\r\n\r\nexport default bindWheel;\r\n","import Level from \"./level\";\r\nimport Level1 from \"./level1\";\r\nimport Level2 from \"./level2\";\r\n\r\nfunction selectLvl(currentLevel: number): Level | true {\r\n  switch (currentLevel) {\r\n    case 1:\r\n      return new Level1();\r\n    case 2:\r\n      return new Level2();\r\n    default:\r\n      return true;\r\n  }\r\n}\r\n\r\nexport default selectLvl;\r\n","import Level1 from \"./level1\";\r\n\r\nabstract class Level {\r\n  protected abstract backgroundImage: string;\r\n\r\n  getBgImg = () => this.backgroundImage;\r\n}\r\n\r\nexport default Level;\r\n","import Level from \"./level\";\r\n\r\nclass Level1 extends Level {\r\n  protected backgroundImage: string = \"./images/bg-lvl1.png\";\r\n}\r\n\r\nexport default Level1;\r\n","import Level from \"./level\";\r\n\r\nclass Level2 extends Level {\r\n  protected backgroundImage: string = \"./images/bg-demo-black.png\";\r\n}\r\n\r\nexport default Level2;\r\n","import Turtle from \"./characters/turtle\";\r\n\r\ninterface Options {\r\n  bgWidth: number;\r\n  currentLvl: number;\r\n}\r\n\r\nfunction checkTurtle(mainCharacter: Turtle, options: Options): number {\r\n  if (mainCharacter.getX() === options.bgWidth) {\r\n    options.currentLvl++;\r\n    mainCharacter.resetPosition();\r\n  }\r\n  return options.currentLvl;\r\n}\r\n\r\nexport default checkTurtle;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Turtle from \"./characters/turtle\";\r\nimport { version } from \"../package.json\";\r\nimport bindControls from \"./controls/controls\";\r\nimport paintBackground from \"./background\";\r\nimport checkTurtle from \"./turtle-observer\";\r\nimport selectLvl from \"./levels/level-selector\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst context = canvas.getContext(\"2d\");\r\nconst turtle = new Turtle();\r\n\r\nlet currentLevel: number = 1;\r\n\r\nbindControls(canvas, turtle);\r\n\r\nfunction render() {\r\n  const level = selectLvl(currentLevel);\r\n\r\n  if (level === true) {\r\n    alert(\"Game complete! Demo for now.. Replace later.\");\r\n  } else {\r\n    const background = paintBackground({\r\n      canvas,\r\n      context,\r\n      mainCharacter: turtle,\r\n      level,\r\n    });\r\n    turtle.setLimits(background.width, background.height);\r\n    turtle.paint(context);\r\n    currentLevel = checkTurtle(turtle, {\r\n      bgWidth: background.width,\r\n      currentLvl: currentLevel,\r\n    });\r\n    requestAnimationFrame(render);\r\n  }\r\n}\r\n\r\nfunction resizeCanvas() {\r\n  canvas.height = window.innerHeight - 50;\r\n  canvas.width = window.innerWidth;\r\n}\r\n\r\nwindow.addEventListener(\"resize\", resizeCanvas);\r\nresizeCanvas();\r\n\r\nconst versionSpan = document.getElementById(\"version\");\r\nversionSpan.innerText = version;\r\n\r\ncanvas.focus();\r\nrender();\r\n"],"names":["calculateScreenCutOffPoints","bgSize","canvasSize","points","noOfFits","Math","floor","i","push","options","backgroundImage","document","createElement","src","level","getBgImg","horizontalSegments","width","canvas","verticalSegments","height","x","mainCharacter","getX","y","getY","onload","context","drawImage","this","resetPosition","angle","right","setBgStart","bgStartX","bgStartY","setLimits","limitX","limitY","moveUp","rotate","up","moveDown","down","moveLeft","left","moveRight","applyRotation","translate","paint","turtleImage","resetTransform","Turtle","angles","PI","addEventListener","event","includes","key","handleKeyDown","handleEvent","preventDefault","TouchEvent","touch","touches","pageX","pageY","PointerEvent","deltaX","deltaY","handleWheel","currentLevel","Level1","Level2","bgWidth","currentLvl","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","getElementById","getContext","turtle","resizeCanvas","window","innerHeight","innerWidth","innerText","version","focus","render","alert","background","requestAnimationFrame"],"sourceRoot":""}