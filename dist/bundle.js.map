{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/main.ts","webpack:///./src/background.ts","webpack:///./src/characters/turtle.ts","webpack:///./src/constants/angles.ts","webpack:///./src/controls/controls.ts","webpack:///./src/controls/keyboard.ts","webpack:///./src/controls/pointer.ts","webpack:///./src/controls/touchpad.ts","webpack:///webpack/bootstrap"],"sourcesContent":["import Turtle from \"./characters/turtle\";\r\nimport { version } from \"../package.json\";\r\nimport bindControls from \"./controls/controls\";\r\nimport paintBackground from \"./background\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst context = canvas.getContext(\"2d\");\r\nconst turtle = new Turtle();\r\n\r\nbindControls(canvas, turtle);\r\n\r\nfunction render() {\r\n  const background = paintBackground(canvas, context, turtle);\r\n  turtle.setLimits(background.width, background.height);\r\n  turtle.paint(context);\r\n  requestAnimationFrame(render);\r\n}\r\n\r\nconst versionSpan = document.getElementById(\"version\");\r\nversionSpan.innerText = version;\r\n\r\ncanvas.focus();\r\nrender();\r\n","import Turtle from \"./characters/turtle\";\r\n\r\nfunction paintBackground(\r\n  canvas: HTMLCanvasElement,\r\n  context: CanvasRenderingContext2D,\r\n  mainCharacter: Turtle\r\n) {\r\n  const backgroundImage = document.createElement(\"img\");\r\n  backgroundImage.src = \"./images/background.png\";\r\n  const x =\r\n    mainCharacter.getX() < canvas.width\r\n      ? 0\r\n      : backgroundImage.width - mainCharacter.getX();\r\n  const y =\r\n    mainCharacter.getY() < canvas.height\r\n      ? 0\r\n      : backgroundImage.height - mainCharacter.getY();\r\n  backgroundImage.onload = () =>\r\n    context.drawImage(\r\n      backgroundImage,\r\n      x,\r\n      y,\r\n      canvas.width,\r\n      canvas.height,\r\n      0,\r\n      0,\r\n      canvas.width,\r\n      canvas.height\r\n    );\r\n  return backgroundImage;\r\n}\r\n\r\nexport default paintBackground;\r\n","import angles from \"../constants/angles\";\r\nimport Character from \"./character\";\r\n\r\nclass Turtle implements Character {\r\n  private x: number;\r\n  private y: number;\r\n  private angle: number;\r\n\r\n  private limitX: number;\r\n  private limitY: number;\r\n\r\n  constructor() {\r\n    this.x = 10;\r\n    this.y = 10;\r\n    this.angle = angles.right;\r\n  }\r\n\r\n  getX = () => this.x;\r\n  getY = () => this.y;\r\n\r\n  setLimits(x: number, y: number) {\r\n    this.limitX = x;\r\n    this.limitY = y;\r\n  }\r\n\r\n  moveUp() {\r\n    this.rotate(angles.up);\r\n    if (this.y > 0) {\r\n      --this.y;\r\n    }\r\n  }\r\n\r\n  moveDown() {\r\n    this.rotate(angles.down);\r\n    if (this.y < this.limitY) {\r\n      ++this.y;\r\n    }\r\n  }\r\n\r\n  moveLeft() {\r\n    this.rotate(angles.left);\r\n    if (this.x > 0) {\r\n      --this.x;\r\n    }\r\n  }\r\n\r\n  moveRight() {\r\n    this.rotate(angles.right);\r\n    if (this.x < this.limitX) {\r\n      ++this.x;\r\n    }\r\n  }\r\n\r\n  private rotate(angle: number) {\r\n    this.angle = angle;\r\n  }\r\n\r\n  private applyRotation(context: CanvasRenderingContext2D) {\r\n    context.translate(this.x, this.y);\r\n    context.rotate(this.angle);\r\n    context.translate(-this.x, -this.y);\r\n  }\r\n\r\n  paint(context: CanvasRenderingContext2D) {\r\n    const turtleImage = document.createElement(\"img\");\r\n    turtleImage.src = \"./images/turtle.png\";\r\n    turtleImage.onload = () => {\r\n      this.applyRotation(context);\r\n      context.drawImage(\r\n        turtleImage,\r\n        this.x,\r\n        this.y,\r\n        turtleImage.width / 4,\r\n        turtleImage.height / 4\r\n      );\r\n      context.resetTransform();\r\n    };\r\n  }\r\n}\r\n\r\nexport default Turtle;\r\n","const angles = {\r\n  up: 0,\r\n  right: Math.PI / 2,\r\n  down: Math.PI,\r\n  left: Math.PI + Math.PI / 2,\r\n};\r\n\r\nexport default angles;\r\n","import Turtle from \"../characters/turtle\";\r\nimport bindKeyboard from \"./keyboard\";\r\nimport bindPointer from \"./pointer\";\r\nimport bindWheel from \"./touchpad\";\r\n\r\nfunction bindControls(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  bindKeyboard(canvas, mainCharacter);\r\n  bindWheel(canvas, mainCharacter);\r\n  bindPointer(canvas, mainCharacter);\r\n}\r\n\r\nexport default bindControls;\r\n","import Turtle from \"../characters/turtle\";\r\n\r\nfunction handleKeyDown(event: KeyboardEvent, mainCharacter: Turtle) {\r\n  const upKeys = [\"w\", \"W\", \"ArrowUp\"];\r\n  const downKeys = [\"s\", \"S\", \"ArrowDown\"];\r\n  const leftKeys = [\"a\", \"A\", \"ArrowLeft\"];\r\n  const rightKeys = [\"d\", \"D\", \"ArrowRight\"];\r\n\r\n  if (upKeys.includes(event.key)) {\r\n    mainCharacter.moveUp();\r\n  }\r\n\r\n  if (downKeys.includes(event.key)) {\r\n    mainCharacter.moveDown();\r\n  }\r\n\r\n  if (leftKeys.includes(event.key)) {\r\n    mainCharacter.moveLeft();\r\n  }\r\n\r\n  if (rightKeys.includes(event.key)) {\r\n    mainCharacter.moveRight();\r\n  }\r\n}\r\n\r\nfunction bindKeyboard(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  canvas.addEventListener(\"keydown\", (event) =>\r\n    handleKeyDown(event, mainCharacter)\r\n  );\r\n}\r\n\r\nexport default bindKeyboard;\r\n","import Turtle from \"../characters/turtle\";\r\n\r\nfunction handleEvent(event: TouchEvent | PointerEvent, mainCharacter: Turtle) {\r\n  event.preventDefault();\r\n  let x: number;\r\n  let y: number;\r\n  if (event instanceof TouchEvent) {\r\n    const touch = event.touches[0];\r\n    x = touch.pageX;\r\n    y = touch.pageY;\r\n  } else {\r\n    x = event.pageX;\r\n    y = event.pageY;\r\n  }\r\n  if (x < mainCharacter.getX()) {\r\n    mainCharacter.moveLeft();\r\n  }\r\n  if (x > mainCharacter.getX()) {\r\n    mainCharacter.moveRight();\r\n  }\r\n  if (y < mainCharacter.getY()) {\r\n    mainCharacter.moveUp();\r\n  }\r\n  if (y > mainCharacter.getY()) {\r\n    mainCharacter.moveDown();\r\n  }\r\n}\r\n\r\nfunction bindPointer(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  if (PointerEvent) {\r\n    canvas.addEventListener(\"pointerdown\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n    canvas.addEventListener(\"pointermove\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n  } else {\r\n    canvas.addEventListener(\"touchstart\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n    canvas.addEventListener(\"touchmove\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n  }\r\n}\r\n\r\nexport default bindPointer;\r\n","import Turtle from \"../characters/turtle\";\r\n\r\nfunction handleWheel(event: WheelEvent, mainCharacter: Turtle) {\r\n  event.preventDefault();\r\n  if (event.deltaX < 0) {\r\n    mainCharacter.moveLeft();\r\n  }\r\n  if (event.deltaX > 0) {\r\n    mainCharacter.moveRight();\r\n  }\r\n  if (event.deltaY < 0) {\r\n    mainCharacter.moveUp();\r\n  }\r\n  if (event.deltaY > 0) {\r\n    mainCharacter.moveDown();\r\n  }\r\n}\r\n\r\nfunction bindWheel(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  canvas.addEventListener(\"wheel\", (event) =>\r\n    handleWheel(event, mainCharacter)\r\n  );\r\n}\r\n\r\nexport default bindWheel;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["canvas","context","turtle","mainCharacter","backgroundImage","document","createElement","src","x","getX","width","y","getY","height","onload","drawImage","this","angle","right","setLimits","limitX","limitY","moveUp","rotate","up","moveDown","down","moveLeft","left","moveRight","applyRotation","translate","paint","turtleImage","resetTransform","Turtle","angles","Math","PI","addEventListener","event","includes","key","handleKeyDown","handleEvent","preventDefault","TouchEvent","touch","touches","pageX","pageY","PointerEvent","deltaX","deltaY","handleWheel","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","getElementById","getContext","innerText","version","focus","render","background","requestAnimationFrame"],"sourceRoot":""}