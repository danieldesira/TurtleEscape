{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/main.ts","webpack:///./src/background.ts","webpack:///./src/characters/turtle.ts","webpack:///./src/constants/angles.ts","webpack:///./src/controls/controls.ts","webpack:///./src/controls/keyboard.ts","webpack:///./src/controls/pointer.ts","webpack:///./src/controls/touchpad.ts","webpack:///webpack/bootstrap"],"sourcesContent":["import Turtle from \"./characters/turtle\";\r\nimport { version } from \"../package.json\";\r\nimport bindControls from \"./controls/controls\";\r\nimport paintBackground from \"./background\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst context = canvas.getContext(\"2d\");\r\nconst turtle = new Turtle();\r\n\r\nbindControls(canvas, turtle);\r\n\r\nfunction render() {\r\n  const background = paintBackground(canvas, context, turtle);\r\n  turtle.setLimits(background.width, background.height);\r\n  turtle.paint(context);\r\n  requestAnimationFrame(render);\r\n}\r\n\r\nconst versionSpan = document.getElementById(\"version\");\r\nversionSpan.innerText = version;\r\n\r\ncanvas.focus();\r\nrender();\r\n","import Turtle from \"./characters/turtle\";\r\n\r\nfunction paintBackground(\r\n  canvas: HTMLCanvasElement,\r\n  context: CanvasRenderingContext2D,\r\n  mainCharacter: Turtle\r\n) {\r\n  const backgroundImage = document.createElement(\"img\");\r\n  backgroundImage.src = \"./images/background.png\";\r\n  const horizontalSegments = calculateScreenCutOffPoints(\r\n    backgroundImage.width,\r\n    canvas.width\r\n  );\r\n  const verticalSegments = calculateScreenCutOffPoints(\r\n    backgroundImage.height,\r\n    canvas.height\r\n  );\r\n  const x =\r\n    mainCharacter.getX() < canvas.width\r\n      ? 0\r\n      : horizontalSegments[\r\n          Math.floor(backgroundImage.width / mainCharacter.getX()) - 1\r\n        ];\r\n  const y =\r\n    mainCharacter.getY() < canvas.height\r\n      ? 0\r\n      : verticalSegments[\r\n          Math.floor(backgroundImage.height / mainCharacter.getY()) - 1\r\n        ];\r\n  backgroundImage.onload = () =>\r\n    context.drawImage(\r\n      backgroundImage,\r\n      x,\r\n      y,\r\n      canvas.width,\r\n      canvas.height,\r\n      0,\r\n      0,\r\n      canvas.width,\r\n      canvas.height\r\n    );\r\n  return backgroundImage;\r\n}\r\n\r\nfunction calculateScreenCutOffPoints(\r\n  bgSize: number,\r\n  canvasSize: number\r\n): Array<number> {\r\n  const points = [];\r\n  const noOfFits = Math.floor(bgSize / canvasSize);\r\n  for (let i = 1; i < noOfFits; i++) {\r\n    points.push(i * canvasSize);\r\n  }\r\n  points.push(bgSize - noOfFits * canvasSize);\r\n  return points;\r\n}\r\n\r\nexport default paintBackground;\r\n","import angles from \"../constants/angles\";\r\nimport Character from \"./character\";\r\n\r\nclass Turtle implements Character {\r\n  private x: number;\r\n  private y: number;\r\n  private angle: number;\r\n\r\n  private bgStartX: number;\r\n  private bgStartY: number;\r\n  private limitX: number;\r\n  private limitY: number;\r\n\r\n  constructor() {\r\n    this.x = 50;\r\n    this.y = 10;\r\n    this.angle = angles.right;\r\n    this.bgStartX = 0;\r\n    this.bgStartY = 0;\r\n  }\r\n\r\n  getX = () => this.x;\r\n  getY = () => this.y;\r\n\r\n  setBgStart(x: number, y: number) {\r\n    this.bgStartX = x;\r\n    this.bgStartY = y;\r\n  }\r\n\r\n  setLimits(x: number, y: number) {\r\n    this.limitX = x;\r\n    this.limitY = y;\r\n  }\r\n\r\n  moveUp() {\r\n    this.rotate(angles.up);\r\n    if (this.y > 0) {\r\n      --this.y;\r\n    }\r\n  }\r\n\r\n  moveDown() {\r\n    this.rotate(angles.down);\r\n    if (this.y < this.limitY) {\r\n      ++this.y;\r\n    }\r\n  }\r\n\r\n  moveLeft() {\r\n    this.rotate(angles.left);\r\n    if (this.x > 0) {\r\n      --this.x;\r\n    }\r\n  }\r\n\r\n  moveRight() {\r\n    this.rotate(angles.right);\r\n    if (this.x < this.limitX) {\r\n      ++this.x;\r\n    }\r\n  }\r\n\r\n  private rotate(angle: number) {\r\n    this.angle = angle;\r\n  }\r\n\r\n  private applyRotation(context: CanvasRenderingContext2D) {\r\n    context.translate(this.x, this.y);\r\n    context.rotate(this.angle);\r\n    context.translate(-this.x, -this.y);\r\n  }\r\n\r\n  paint(context: CanvasRenderingContext2D) {\r\n    const turtleImage = document.createElement(\"img\");\r\n    turtleImage.src = \"./images/turtle.png\";\r\n    turtleImage.onload = () => {\r\n      this.applyRotation(context);\r\n      context.drawImage(\r\n        turtleImage,\r\n        this.x - this.bgStartX,\r\n        this.y - this.bgStartY,\r\n        turtleImage.width / 4,\r\n        turtleImage.height / 4\r\n      );\r\n      context.resetTransform();\r\n    };\r\n  }\r\n}\r\n\r\nexport default Turtle;\r\n","const angles = {\r\n  up: 0,\r\n  right: Math.PI / 2,\r\n  down: Math.PI,\r\n  left: Math.PI + Math.PI / 2,\r\n};\r\n\r\nexport default angles;\r\n","import Turtle from \"../characters/turtle\";\r\nimport bindKeyboard from \"./keyboard\";\r\nimport bindPointer from \"./pointer\";\r\nimport bindWheel from \"./touchpad\";\r\n\r\nfunction bindControls(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  bindKeyboard(canvas, mainCharacter);\r\n  bindWheel(canvas, mainCharacter);\r\n  bindPointer(canvas, mainCharacter);\r\n}\r\n\r\nexport default bindControls;\r\n","import Turtle from \"../characters/turtle\";\r\n\r\nfunction handleKeyDown(event: KeyboardEvent, mainCharacter: Turtle) {\r\n  const upKeys = [\"w\", \"W\", \"ArrowUp\"];\r\n  const downKeys = [\"s\", \"S\", \"ArrowDown\"];\r\n  const leftKeys = [\"a\", \"A\", \"ArrowLeft\"];\r\n  const rightKeys = [\"d\", \"D\", \"ArrowRight\"];\r\n\r\n  if (upKeys.includes(event.key)) {\r\n    mainCharacter.moveUp();\r\n  }\r\n\r\n  if (downKeys.includes(event.key)) {\r\n    mainCharacter.moveDown();\r\n  }\r\n\r\n  if (leftKeys.includes(event.key)) {\r\n    mainCharacter.moveLeft();\r\n  }\r\n\r\n  if (rightKeys.includes(event.key)) {\r\n    mainCharacter.moveRight();\r\n  }\r\n}\r\n\r\nfunction bindKeyboard(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  canvas.addEventListener(\"keydown\", (event) =>\r\n    handleKeyDown(event, mainCharacter)\r\n  );\r\n}\r\n\r\nexport default bindKeyboard;\r\n","import Turtle from \"../characters/turtle\";\r\n\r\nfunction handleEvent(event: TouchEvent | PointerEvent, mainCharacter: Turtle) {\r\n  event.preventDefault();\r\n  let x: number;\r\n  let y: number;\r\n  if (event instanceof TouchEvent) {\r\n    const touch = event.touches[0];\r\n    x = touch.pageX;\r\n    y = touch.pageY;\r\n  } else {\r\n    x = event.pageX;\r\n    y = event.pageY;\r\n  }\r\n  if (x < mainCharacter.getX()) {\r\n    mainCharacter.moveLeft();\r\n  }\r\n  if (x > mainCharacter.getX()) {\r\n    mainCharacter.moveRight();\r\n  }\r\n  if (y < mainCharacter.getY()) {\r\n    mainCharacter.moveUp();\r\n  }\r\n  if (y > mainCharacter.getY()) {\r\n    mainCharacter.moveDown();\r\n  }\r\n}\r\n\r\nfunction bindPointer(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  if (PointerEvent) {\r\n    canvas.addEventListener(\"pointerdown\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n    canvas.addEventListener(\"pointermove\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n  } else {\r\n    canvas.addEventListener(\"touchstart\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n    canvas.addEventListener(\"touchmove\", (event) =>\r\n      handleEvent(event, mainCharacter)\r\n    );\r\n  }\r\n}\r\n\r\nexport default bindPointer;\r\n","import Turtle from \"../characters/turtle\";\r\n\r\nfunction handleWheel(event: WheelEvent, mainCharacter: Turtle) {\r\n  event.preventDefault();\r\n  if (event.deltaX < 0) {\r\n    mainCharacter.moveLeft();\r\n  }\r\n  if (event.deltaX > 0) {\r\n    mainCharacter.moveRight();\r\n  }\r\n  if (event.deltaY < 0) {\r\n    mainCharacter.moveUp();\r\n  }\r\n  if (event.deltaY > 0) {\r\n    mainCharacter.moveDown();\r\n  }\r\n}\r\n\r\nfunction bindWheel(canvas: HTMLCanvasElement, mainCharacter: Turtle) {\r\n  canvas.addEventListener(\"wheel\", (event) =>\r\n    handleWheel(event, mainCharacter)\r\n  );\r\n}\r\n\r\nexport default bindWheel;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["canvas","context","turtle","calculateScreenCutOffPoints","bgSize","canvasSize","points","noOfFits","Math","floor","i","push","mainCharacter","backgroundImage","document","createElement","src","horizontalSegments","width","verticalSegments","height","x","getX","y","getY","onload","drawImage","this","angle","right","bgStartX","bgStartY","setBgStart","setLimits","limitX","limitY","moveUp","rotate","up","moveDown","down","moveLeft","left","moveRight","applyRotation","translate","paint","turtleImage","resetTransform","Turtle","angles","PI","addEventListener","event","includes","key","handleKeyDown","handleEvent","preventDefault","TouchEvent","touch","touches","pageX","pageY","PointerEvent","deltaX","deltaY","handleWheel","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","getElementById","getContext","innerText","version","focus","render","background","requestAnimationFrame"],"sourceRoot":""}